#!/usr/bin/env python3
# Copyright (c) 2018-2020 FASTEN.
#
# This file is part of FASTEN
# (see https://www.fasten-project.eu/).
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import argparse
import csv
import json


def parse_args():
    parser = argparse.ArgumentParser(
        "Convert CScout graph to FASTEN stiched graph"
    )
    parser.add_argument("cscout")
    parser.add_argument("output")
    return parser.parse_args()


def create_uri(function):
    return "fasten://test$1.0/program;C/{}()".format(function)


def get_node_uri(node, nodes_lookup, counter):
    new_counter = counter
    if node in nodes_lookup:
        n = nodes_lookup[node]
    else:
        n = create_uri(node)
        nodes_lookup[node] = n
        new_counter = counter + 1
    return n, counter, new_counter


def create_stiched_graph(edges):
    nodes_lookup = {}
    counter = 0
    edge_list = []
    nodes = {}
    for edge in edges:
        n1, counter1, counter = get_node_uri(edge[0], nodes_lookup, counter)
        nodes[str(counter1)] = {
            "URI": n1,
            "metadata": {}
        }
        n2, counter2, counter = get_node_uri(edge[1], nodes_lookup, counter)
        nodes[str(counter2)] = {
            "URI": n2,
            "metadata": {}
        }
        edge_list.append([counter1, counter2])

    return {"edges": edge_list, "nodes": nodes}


def parse_cscout_output(graph):
    with open(graph) as f:
        reader = csv.reader(f, delimiter=' ')
        clear = lambda x: x.replace('program.c:', '')
        edge_list = {(clear(r[0]), clear(r[1])) for r in reader}
        return create_stiched_graph(edge_list)


def main():
    args = parse_args()
    graph = parse_cscout_output(args.cscout)

    with open(args.output, 'w') as out:
        json.dump(graph, out)


if __name__ == "__main__":
    main()
